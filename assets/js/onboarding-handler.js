// Onboarding Handler - Teljes onboarding folyamat kezel√©se
// Ez a modul kezeli a bejelentkez√©si folyamatot, API adatok gy≈±jt√©s√©t √©s Firestore ment√©st

import { doc, setDoc } from 'https://www.gstatic.com/firebasejs/11.10.0/firebase-firestore.js';
import { getFunctions, httpsCallable } from 'https://www.gstatic.com/firebasejs/11.10.0/firebase-functions.js';
import { injectOnboardingPopup, checkBirthDateAndShowPopup } from './onboarding-popup.js';

// Glob√°lis v√°ltoz√≥k az adatok t√°rol√°s√°hoz
let collectedData = {
  graphData: null,
  googleData: null,
  onboardingType: null,
  userInfo: null
};

// Popup injection inicializ√°l√°sa
document.addEventListener('DOMContentLoaded', () => {
  injectOnboardingPopup();
});

/**
 * Onboarding inicializ√°l√°sa - Auth state listener √©s API adatok gy≈±jt√©se
 * @param {Object} auth - Firebase Auth instance
 * @param {Object} db - Firestore database instance
 */
export function initializeOnboarding(auth, db) {
  console.log('üöÄ Onboarding handler inicializ√°l√°sa...');
  
  // Onboarding t√≠pus meghat√°roz√°sa URL alapj√°n
  const currentPath = window.location.pathname;
  if (currentPath.includes('onboarding_teacher.html')) {
    collectedData.onboardingType = 'teacher';
  } else if (currentPath.includes('onboarding_parent.html')) {
    collectedData.onboardingType = 'parent';
  } else {
    collectedData.onboardingType = 'student';
  }
  
  console.log('üìã Onboarding t√≠pus:', collectedData.onboardingType);
  
  // Auth state listener be√°ll√≠t√°sa
  auth.onAuthStateChanged(async (user) => {
    if (user) {
      console.log('üë§ Felhaszn√°l√≥ bejelentkezett:', user.uid);
      collectedData.userInfo = {
        uid: user.uid,
        email: user.email,
        displayName: user.displayName,
        photoURL: user.photoURL
      };
      
      // API adatok gy≈±jt√©se
      await collectAPIData();
    } else {
      console.log('‚ùå Nincs bejelentkezett felhaszn√°l√≥');
      collectedData = {
        graphData: null,
        googleData: null,
        onboardingType: collectedData.onboardingType,
        userInfo: null
      };
    }
  });
  
  // "Kezdj√ºk" gomb event listener hozz√°ad√°sa
  setupStartButton(auth, db);
}

/**
 * API adatok gy≈±jt√©se Microsoft Graph √©s Google API-b√≥l
 */
async function collectAPIData() {
  console.log('üì° API adatok gy≈±jt√©se...');
  
  // Microsoft Graph API adatok
  try {
    const graphToken = localStorage.getItem('eu2k-graph-token');
    if (graphToken) {
      console.log('üîç Microsoft Graph API h√≠v√°s...');
      const response = await fetch('https://graph.microsoft.com/v1.0/me', {
        headers: {
          'Authorization': `Bearer ${graphToken}`,
          'Content-Type': 'application/json'
        }
      });
      
      if (response.ok) {
        const data = await response.json();
        collectedData.graphData = {
          displayName: data.displayName,
          mail: data.mail || data.userPrincipalName,
          jobTitle: data.jobTitle,
          department: data.department,
          officeLocation: data.officeLocation
        };
        console.log('‚úÖ Microsoft Graph adatok:', collectedData.graphData);
        
        // Ment√©s localStorage-ba is (kompatibilit√°s)
        localStorage.setItem('eu2k-graph-data', JSON.stringify(collectedData.graphData));
      } else {
        console.warn('‚ö†Ô∏è Microsoft Graph API hiba:', response.status);
      }
    }
  } catch (error) {
    console.error('‚ùå Microsoft Graph API hiba:', error);
  }
  
  // Google API adatok
  try {
    const googleToken = localStorage.getItem('eu2k-google-token');
    if (googleToken) {
      console.log('üîç Google API h√≠v√°s...');
      
      // Alapvet≈ë userinfo lek√©r√©se
      const userinfoResponse = await fetch('https://www.googleapis.com/oauth2/v2/userinfo', {
        headers: {
          'Authorization': `Bearer ${googleToken}`,
          'Content-Type': 'application/json'
        }
      });
      
      if (userinfoResponse.ok) {
        const userinfoData = await userinfoResponse.json();
        collectedData.googleData = {
          displayName: userinfoData.name,
          email: userinfoData.email,
          picture: userinfoData.picture,
          givenName: userinfoData.given_name,
          familyName: userinfoData.family_name,
          birthday: null // alap√©rtelmezett
        };
        
        // Sz√ºlet√©si d√°tum lek√©r√©se People API-b√≥l
        try {
          const peopleResponse = await fetch('https://people.googleapis.com/v1/people/me?personFields=birthdays', {
            headers: {
              'Authorization': `Bearer ${googleToken}`,
              'Content-Type': 'application/json'
            }
          });
          
          if (peopleResponse.ok) {
            const peopleData = await peopleResponse.json();
            if (peopleData.birthdays && peopleData.birthdays.length > 0) {
              const birthday = peopleData.birthdays[0].date;
              if (birthday && birthday.month && birthday.day) {
                // Form√°tum: MM-DD (√©v n√©lk√ºl, mert az gyakran hi√°nyzik)
                const month = String(birthday.month).padStart(2, '0');
                const day = String(birthday.day).padStart(2, '0');
                collectedData.googleData.birthday = `${month}-${day}`;
                console.log('‚úÖ Sz√ºlet√©si d√°tum lek√©rve:', collectedData.googleData.birthday);
              }
            }
          } else {
            console.warn('‚ö†Ô∏è Google People API hiba:', peopleResponse.status);
          }
        } catch (peopleError) {
          console.warn('‚ö†Ô∏è Google People API nem el√©rhet≈ë:', peopleError);
        }
        
        // BirthDate ellen≈ërz√©s √©s popup megjelen√≠t√©se sz√ºks√©g eset√©n
        const userData = { birthDate: collectedData.googleData.birthday || '' };
        checkBirthDateAndShowPopup(userData);
        
        console.log('‚úÖ Google API adatok:', collectedData.googleData);
        
        // Ment√©s localStorage-ba is (kompatibilit√°s)
        localStorage.setItem('eu2k-google-data', JSON.stringify(collectedData.googleData));
      } else {
        console.warn('‚ö†Ô∏è Google API hiba:', userinfoResponse.status);
      }
    }
  } catch (error) {
    console.error('‚ùå Google API hiba:', error);
  }
}

/**
 * "Kezdj√ºk" gomb event listener be√°ll√≠t√°sa
 */
function setupStartButton(auth, db) {
  // V√°runk, hogy a DOM bet√∂lt≈ëdj√∂n
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      attachStartButtonListener(auth, db);
    });
  } else {
    attachStartButtonListener(auth, db);
  }
}

/**
 * "Kezdj√ºk" gomb listener csatol√°sa
 */
function attachStartButtonListener(auth, db) {
  // Keres√©s k√ºl√∂nb√∂z≈ë lehets√©ges gomb szelektorokkal
  const possibleSelectors = [
    'button[onclick*="checkTermsAndRedirect"]',
    '.start-button',
    '#start-button',
    'button:contains("Kezdj√ºk")',
    'button[data-action="start"]'
  ];
  
  let startButton = null;
  for (const selector of possibleSelectors) {
    startButton = document.querySelector(selector);
    if (startButton) break;
  }
  
  if (startButton) {
    console.log('üéØ "Kezdj√ºk" gomb megtal√°lva');
    
    // Eredeti onclick elt√°vol√≠t√°sa √©s √∫j handler hozz√°ad√°sa
    startButton.removeAttribute('onclick');
    startButton.addEventListener('click', async (e) => {
      e.preventDefault();
      console.log('üöÄ "Kezdj√ºk" gomb megnyomva - onboarding finaliz√°l√°sa...');
      
      const success = await completeOnboarding(auth, db);
      if (success) {
        // Eredeti navig√°ci√≥s logika
        if (window.welcomeScreenManager) {
          window.welcomeScreenManager.markAsVisited();
          window.welcomeScreenManager.returnFromWelcomeScreen();
        } else {
          window.location.href = '/EU2K-Hub/index.html';
        }
      } else {
        alert('Hiba t√∂rt√©nt az onboarding befejez√©se sor√°n. K√©rlek pr√≥b√°ld √∫jra!');
      }
    });
  } else {
    console.warn('‚ö†Ô∏è "Kezdj√ºk" gomb nem tal√°lhat√≥');
  }
}

/**
 * Onboarding befejez√©se - Firestore dokumentumok l√©trehoz√°sa
 * @param {Object} auth - Firebase Auth instance
 * @param {Object} db - Firestore database instance
 * @returns {Promise<boolean>} - Sikeres volt-e a m≈±velet
 */
export async function completeOnboarding(auth, db) {
  try {
    const user = collectedData.userInfo || auth.currentUser;
    if (!user) {
      console.error('‚ùå Nincs bejelentkezett felhaszn√°l√≥!');
      return false;
    }

    const uid = user.uid;
    console.log('üöÄ Onboarding befejez√©se...', uid);
    console.log('üìä Gy≈±jt√∂tt adatok:', collectedData);

    // 1. El≈ësz√∂r l√©trehozzuk a users/{uid} sz√ºl≈ë dokumentumot
    const userRef = doc(db, 'users', uid);
    await setDoc(userRef, {
      uid: uid,
      createdAt: new Date().toISOString(),
      lastUpdated: new Date().toISOString()
    }, { merge: true });
    console.log('‚úÖ User f≈ë dokumentum l√©trehozva');

    // 2. Felhaszn√°l√≥ t√≠pus meghat√°roz√°sa a gy≈±jt√∂tt adatok alapj√°n
    let accessLevel = 'basic';
    let accountType = 'school'; // default di√°k
    let jobTitle = '';
    let displayName = '';
    let email = '';
    let birthDate = '';

    // Onboarding t√≠pus haszn√°lata
    if (collectedData.onboardingType === 'teacher') {
      accessLevel = 'teacher';
      accountType = 'teacher';
    } else if (collectedData.onboardingType === 'parent') {
      accessLevel = 'parent'; // Jav√≠tva: 'owner' helyett 'parent'
      accountType = 'parent';
    } else {
      // student
      accessLevel = 'basic';
      accountType = 'school';
    }

    // 3. Microsoft Graph API adatok feldolgoz√°sa
    if (collectedData.graphData) {
      const parsedData = collectedData.graphData;
      displayName = parsedData.displayName || '';
      email = parsedData.mail || '';
      
      if (accountType === 'school' && parsedData.jobTitle) {
        // Di√°k eset√©n oszt√°ly kisz√°m√≠t√°sa (2030: 8., 2029: 9., stb.)
        const currentYear = new Date().getFullYear();
        const match = parsedData.jobTitle.match(/(\d{4})([A-Z]?)/);
        if (match) {
          const graduationYear = parseInt(match[1]);
          const classLetter = match[2] || '';
          const grade = Math.max(7, Math.min(12, 19 - (graduationYear - currentYear)));
          jobTitle = `${grade}.${classLetter}`;
        }
      } else if (accountType === 'teacher') {
        // Tan√°r eset√©n a jobTitle √©rt√©ke
        jobTitle = parsedData.jobTitle || '';
      }
    }

    // 4. Google API adatok feldolgoz√°sa
    if (collectedData.googleData) {
      const parsedData = collectedData.googleData;
      if (parsedData.displayName) {
        // Vezet√©kn√©v + keresztn√©v sorrendben
        const nameParts = parsedData.displayName.split(' ');
        if (nameParts.length >= 2) {
          const firstName = nameParts[0];
          const lastName = nameParts.slice(1).join(' ');
          displayName = `${lastName} ${firstName}`;
        } else {
          displayName = parsedData.displayName;
        }
      }
      email = parsedData.email || '';
      
      // BirthDate kit√∂lt√©se Google adatokb√≥l (ha el√©rhet≈ë)
      if (parsedData.birthday) {
        birthDate = parsedData.birthday;
      }
      
      if (accountType === 'parent') {
        jobTitle = 'Sz√ºl≈ë';
      }
    }

    // 5. Onboarding be√°ll√≠t√°sok lek√©r√©se localStorage-b√≥l
    const useSchoolPfp = localStorage.getItem('eu2k-onboarding-use-provided-pfp') === 'true' || localStorage.getItem('useSchoolPfp') === 'true';
    const selectedAvatar = localStorage.getItem('eu2k-onboarding-avatar') || localStorage.getItem('selectedAvatar') || 'magenta';
    const termsAccepted = localStorage.getItem('eu2k-onboarding-terms-accepted') === 'true' || localStorage.getItem('termsAccepted') === 'true';
    
    // Notification √©s message be√°ll√≠t√°sok
    let notificationSettings = {};
    let messageSettings = {};
    
    try {
      const savedNotifications = localStorage.getItem('eu2k-onboarding-notifications');
      if (savedNotifications) {
        notificationSettings = JSON.parse(savedNotifications);
      }
      
      const savedMessages = localStorage.getItem('eu2k-onboarding-messages');
      if (savedMessages) {
        messageSettings = JSON.parse(savedMessages);
      }
    } catch (error) {
      console.error('‚ùå Error parsing onboarding settings:', error);
    }

    // 6. General dokumentum payload √∂ssze√°ll√≠t√°sa
    const payload = {
      accessLevel: accessLevel,
      accountType: accountType,
      birthDate: birthDate, // Google adatokb√≥l vagy √ºres
      displayName: displayName || user.displayName || localStorage.getItem('eu2k-auth-display-name') || '',
      email: email || user.email || '',
      jobTitle: jobTitle,
      useProvidedPfp: useSchoolPfp, // true ha "Tov√°bb az iskolai profilk√©ppel" gombot nyomt√°k
      pfpColor: useSchoolPfp ? '' : selectedAvatar, // √ºres ha iskolai pfp, egy√©bk√©nt a kiv√°lasztott sz√≠n
      selectedAvatar: useSchoolPfp ? null : selectedAvatar,
      termsAccepted: termsAccepted ? 'true' : 'false',
      notificationSettings: notificationSettings,
      messageSettings: messageSettings,
      uid: user.uid || null,
      onboardingCompleted: true,
      welcomeScreenVisited: true,
      createdAt: new Date().toISOString(),
      comment: 'General profile document created at the end of onboarding with security layer data.'
    };
    
    // PhotoURL hozz√°ad√°sa Google vagy Firebase Auth adatokb√≥l
    let photoURL = null;
    if (collectedData.googleData && collectedData.googleData.picture) {
      photoURL = collectedData.googleData.picture;
      console.log('üñºÔ∏è Google profilk√©p URL hozz√°adva:', photoURL);
    } else if (user.photoURL) {
      photoURL = user.photoURL;
      console.log('üñºÔ∏è Firebase Auth profilk√©p URL hozz√°adva:', photoURL);
    }
    
    if (photoURL) {
      payload.photoURL = photoURL;
    }
    
    // Ha useProvidedPfp be van √°ll√≠tva, mentj√ºk a profil URL-j√©t is
    if (useSchoolPfp) {
      const googleProfileUrl = localStorage.getItem('eu2k-google-profile-url');
      if (googleProfileUrl) {
        payload.profilePictureUrl = googleProfileUrl;
        console.log('üñºÔ∏è Profile URL added to payload:', googleProfileUrl);
      }
    }

    // 7. General dokumentum l√©trehoz√°sa
    const generalRef = doc(db, 'users', uid, 'general_data', 'general');
    await setDoc(generalRef, payload, { merge: true });
    console.log('‚úÖ General profile document saved for user:', uid);
    console.log('üìÑ Payload:', payload);

    // 8. Onboarding security adatok t√∂rl√©se localStorage-b√≥l
    localStorage.removeItem('eu2k-onboarding-avatar');
    localStorage.removeItem('eu2k-onboarding-use-provided-pfp');
    localStorage.removeItem('eu2k-onboarding-profile-confirmed');
    localStorage.removeItem('eu2k-onboarding-notifications');
    localStorage.removeItem('eu2k-onboarding-messages');
    localStorage.removeItem('eu2k-onboarding-terms-accepted');
    localStorage.removeItem('eu2k-google-profile-url');
    
    // Tov√°bbi localStorage elemek t√∂rl√©se
    localStorage.removeItem('eu2k-onboarding-target');
    localStorage.removeItem('eu2k-auth-start-time');
    localStorage.removeItem('eu2k-debug-logs');
    localStorage.removeItem('GDPR_REMOVAL_FLAG');

    // 9. Custom claims be√°ll√≠t√°sa Firebase Functions seg√≠ts√©g√©vel
    try {
      console.log('üîß Custom claims be√°ll√≠t√°sa...');
      const functions = getFunctions();
      const setCustomClaims = httpsCallable(functions, 'setCustomClaims');
      
      // Role meghat√°roz√°sa accessLevel alapj√°n
      let role = 'student';
      if (accessLevel === 'teacher') role = 'teacher';
      else if (accessLevel === 'admin') role = 'admin';
      else if (accessLevel === 'parent') role = 'parent';
      else if (accessLevel === 'owner') role = 'owner';
      
      await setCustomClaims({ userId: uid, role: role });
      console.log(`‚úÖ Custom claims be√°ll√≠tva: ${role}`);
    } catch (claimsError) {
      console.warn('‚ö†Ô∏è Custom claims be√°ll√≠t√°sa sikertelen (Functions lehet hogy nincs telep√≠tve):', claimsError.message);
      // Ne √°ll√≠tsuk meg az onboarding-ot ha a claims be√°ll√≠t√°sa sikertelen
    }

    console.log('üéâ Onboarding sikeresen befejezve!');
    return true;

  } catch (error) {
    console.error('‚ùå Onboarding hiba:', error);
    return false;
  }
}